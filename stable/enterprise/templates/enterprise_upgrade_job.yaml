{{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseEngineUpgradeJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-enterprise-upgrade"
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
    app.kubernetes.io/version: {{ .Chart.AppVersion }}
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
  annotations:
    "helm.sh/hook": post-upgrade
    "helm.sh/hook-weight": "-3"
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-enterprise-upgrade"
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      annotations:
      {{- with .Values.annotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.annotations }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecretName }}
      restartPolicy: Never
      containers:
      - name: "{{ .Release.Name }}-enterprise-upgrade"
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        image: {{ .Values.image }}
        {{- if .Values.dbConfig.ssl }}
        args: ["/bin/bash", "-c", "anchore-enterprise-manager db --db-use-ssl --db-connect postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}?sslmode={{ .Values.dbConfig.sslMode }}\\&sslrootcert=/home/anchore/certs/{{ .Values.dbConfig.sslRootCertName }} upgrade --dontask"]
        {{- else }}
        args: ["/bin/bash", "-c", "anchore-enterprise-manager db --db-connect postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME} upgrade --dontask"]
        {{- end }}
        envFrom:
        {{- if not .Values.inject_secrets_via_env }}
        {{- if .Values.existingSecret }}
        - secretRef:
            name: {{ .Values.existingSecret }}
        {{- else }}
        - secretRef:
            name: {{ include "enterprise.fullname" . }}
        - secretRef:
            name: {{ print (include "enterprise.fullname" .) "-admin-pass" }}
        {{- end }}
        {{- end }}
        - configMapRef:
            name: {{ template "enterprise.fullname" . }}-env
        env:
        {{- with .Values.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if (.Values.certStoreSecretName) }}
        volumeMounts:
        - name: certs
          mountPath: /home/anchore/certs/
          readOnly: true
        {{- end }}
    {{- with .Values.certStoreSecretName }}
      volumes:
      - name: certs
        secret:
          secretName: {{ . }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.anchoreEnterpriseEngineUpgradeJob.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end }}
{{- end }}