{{- if .Values.ui.enabled -}}
{{- $component := "enterprise-ui" -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "enterprise.ui.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "enterprise.labels" (merge (dict "component" $component) .) | indent 4 }}
  annotations:
    {{- include "enterprise.annotations" (merge (dict "component" $component) .) | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "enterprise.fullname" . }}
      app.kubernetes.io/component: {{ $component | lower }}
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "enterprise.labels" (merge (dict "component" $component) .) | indent 8 }}
      annotations:
        {{- include "enterprise.annotations" (merge (dict "component" $component) .) | indent 8 }}
      {{- if not .Values.inject_secrets_via_env }}
        checksum/secrets: {{ include (print $.Template.BasePath "/enterprise_ui_secret.yaml") . | sha256sum }}
      {{- end }}
        checksum/ui-config: {{ include (print $.Template.BasePath "/enterprise_ui_configmap.yaml") . | sha256sum }}
    spec:
    {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.serviceAccountName }}
      serviceAccountName: {{ . }}
    {{- end }}
    {{- with .Values.imagePullSecretName }}
      imagePullSecrets:
      - name: {{ . }}
    {{- end }}
      containers:
      - name: "{{ .Chart.Name }}-{{ $component | lower }}"
        image: {{ .Values.ui.image }}
        imagePullPolicy: {{ .Values.ui.imagePullPolicy }}
        env:
        {{- include "enterprise.environment" (merge (dict "component" $component) .) | indent 8 }}
      {{- if and (index .Values "ui" "existingSecret") (not (index .Values "anchore-ui-redis" "externalEndpoint")) }}
        - name: ANCHORE_REDIS_URI
          value: redis://:{{ index .Values "anchore-ui-redis" "password" }}@{{ template "redis.fullname" . }}-master:6379
      {{- end }}
      {{ if .Values.dbConfig.ssl }}
        - name: PGSSLROOTCERT
          value: /home/anchore/certs/{{ .Values.dbConfig.sslRootCertName }}
      {{- end }}
      {{ with .Values.ui.ldapsRootCaCertName }}
        - name: NODE_EXTRA_CA_CERTS
          value: /home/anchore/certs/{{- . }}
      {{- end }}
        envFrom:
    {{- if not .Values.inject_secrets_via_env }}
      {{- if .Values.ui.existingSecret }}
        - secretRef:
            name: {{ .Values.ui.existingSecret }}
      {{- else }}
        - secretRef:
            name: {{ include "enterprise.ui.fullname" . }}
        - secretRef:
            name: {{ template "enterprise.fullname" . }}-admin-pass
      {{- end }}
    {{- end }}
        ports:
        - containerPort: 3000
          protocol: TCP
          name: enterprise-ui
        volumeMounts:
        - name: anchore-license
          mountPath: /home/anchore/license.yaml
          subPath: license.yaml
        - name: anchore-ui-config
          mountPath: /config/config-ui.yaml
          subPath: config-ui.yaml
      {{- if (.Values.certStoreSecretName) }}
        - name: certs
          mountPath: /home/anchore/certs/
          readOnly: true
      {{- end }}
        livenessProbe:
          tcpSocket:
            port: enterprise-ui
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          successThreshold: {{ .Values.probes.liveness.successThreshold }}
        readinessProbe:
          httpGet:
            path: /service/health
            port: enterprise-ui
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          successThreshold: {{ .Values.probes.readiness.successThreshold }}
        resources:
          {{- toYaml .Values.ui.resources | nindent 10 }}
    {{- if .Values.cloudsql.enabled  }}
      - name: cloudsql-proxy
        image: "{{ .Values.cloudsql.image.repository }}:{{ .Values.cloudsql.image.tag }}"
        imagePullPolicy: {{ .Values.cloudsql.image.pullPolicy }}
        command: ["/cloud_sql_proxy"]
        args:
        - "-instances={{ .Values.cloudsql.instance }}=tcp:5432"
      {{- if .Values.cloudsql.useExistingServiceAcc }}
        - "-credential_file=/var/{{ .Values.cloudsql.serviceAccSecretName }}/{{ .Values.cloudsql.serviceAccJsonName }}"
        volumeMounts:
        - mountPath: "/var/{{ .Values.cloudsql.serviceAccSecretName }}"
          name: {{ .Values.cloudsql.serviceAccSecretName }}
          readOnly: true
      {{- end }}
    {{- end }}
      volumes:
      - name: anchore-license
        secret:
          secretName: {{ .Values.licenseSecretName }}
      - name: anchore-ui-config
        configMap:
          name: {{ template "enterprise.ui.fullname" . }}
    {{- with .Values.certStoreSecretName }}
      - name: certs
        secret:
          secretName: {{ . }}
    {{- end }}
    {{- if .Values.cloudsql.useExistingServiceAcc }}
      - name: {{ .Values.cloudsql.serviceAccSecretName }}
        secret:
          secretName: {{ .Values.cloudsql.serviceAccSecretName }}
    {{- end }}
    {{- with .Values.ui.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.ui.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.ui.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "enterprise.ui.fullname" . | quote }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "enterprise.labels" (merge (dict "component" $component) .) | indent 4 }}
  annotations:
    {{- include "enterprise.annotations" (merge (dict "component" $component) .) | indent 4 }}
spec:
  sessionAffinity: {{ .Values.ui.service.sessionAffinity }}
  type: {{ .Values.ui.service.type }}
  ports:
    - name: enterprise-ui
      port: {{ .Values.ui.service.port }}
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: {{ template "enterprise.fullname" . }}
    app.kubernetes.io/component: {{ $component | lower }}
{{- end -}}
