kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "enterprise.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "enterprise.labels" . | indent 4 }}
  annotations:
    {{- include "enterprise.annotations" . | indent 4 }}
data:
  config.yaml: |
    # Anchore Service Configuration File from ConfigMap
    
    # General system-wide configuration options, these should not need to
    # be altered for basic operation
    #
    service_dir: {{ .Values.serviceDir }}
    tmp_dir: {{ .Values.scratchVolume.mountPath }}
    log_level: {{ .Values.logLevel }}
    image_analyze_timeout_seconds: {{ .Values.imageAnalyzeTimeoutSeconds }}
    allow_awsecr_iam_auto: {{ .Values.allowECRUseIAMRole }}
    host_id: "${ANCHORE_POD_NAME}"
    internal_ssl_verify: {{ .Values.internalServicesSsl.verifyCerts }}
    auto_restart_services: false
    license_file: /home/anchore/license.yaml

    global_client_connect_timeout: {{ default 0 .Values.clientConnectTimeout }}
    global_client_read_timeout: {{ default 0 .Values.clientReadTimeout }}
    max_compressed_image_size_mb: {{ default -1 .Values.maxCompressedImageSizeMB }}

    metrics:
      enabled: {{ .Values.enableMetrics }}
      auth_disabled: {{ .Values.metricsAuthDisabled }}

    {{ if .Values.webhooksEnabled }}
    webhooks:
      {{- toYaml .Values.webhooks | nindent 6 }}
    {{ end }}

    # Configure what feeds to sync.
    # The sync will hit http://ancho.re/feeds, if any outbound firewall config needs to be set in your environment.
    feeds:
      sync_enabled: true
      selective_sync:
        # If enabled only sync specific feeds instead of all that are found.
        enabled: true
        feeds:
          github: {{ default "true" .Values.syncGithub }}
          # Vulnerabilities feed is the feed for distro cve sources (redhat, debian, ubuntu, oracle, alpine....)
          vulnerabilities: {{ default "true" .Values.syncVulnerabilites }}
          # NVD Data is used for non-distro CVEs (jars, npm, etc) that are not packaged and released by distros as rpms, debs, etc
          nvdv2: {{ default "true" .Values.syncNvd }}
          # Warning: enabling the package sync causes the service to require much
          #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
          {{- if and .Values.feeds.enabled (or .Values.feeds.gemDriverEnabled .Values.feeds.npmDriverEnabled) }}
          packages: true
          {{- else }}
          packages: {{ default "false" .Values.syncPackages }}
          {{- end }}
          # Enabling vulndb syncs vulndb vulnerability data from an on-premise anchore enterprise feeds service. Please contact
          # anchore support for finding out more about this service
          {{- if .Values.feeds.enabled }}
          vulndb: {{ default "true" .Values.feeds.vulndbDriverEnabled }}
          # Enabling microsoft syncs MSRC data from an on-premise anchore enterprise feeds service. Please contact
          # anchore support for finding out more about this service
          microsoft: {{ .Values.feeds.msrcDriverEnabled }}
          {{- else }}
          vulndb: false
          microsoft: false
          {{- end }}
          # Sync github data if available for GHSA matches
          github: {{ default "true" .Values.syncGithub }}
    {{- if .Values.feeds.url }}
      url: "{{- .Values.feeds.url }}"
      ssl_verify: {{ .Values.internalServicesSsl.verifyCerts }}
      client_url:
      token_url:
    {{- else if .Values.feeds.enabled }}
      {{- if .Values.internalServicesSsl.enabled }}
      url: "https://{{- template "enterprise.feeds.fullname" . }}:{{- .Values.feeds.service.port }}/v1/feeds"
      {{- else }}
      url: "http://{{- template "enterprise.feeds.fullname" . }}:{{- .Values.feeds.service.port }}/v1/feeds"
      {{- end }}
      ssl_verify: {{ .Values.internalServicesSsl.verifyCerts }}
      client_url:
      token_url:
    {{- else }}
      client_url: "https://ancho.re/v1/account/users"
      token_url: "https://ancho.re/oauth/token"
      anonymous_user_username: anon@ancho.re
      anonymous_user_password: pbiU2RYZ2XrmYQ
    {{- end }}
      connection_timeout_seconds: {{ default 3 .Values.feedsConnectionTimeout }}
      read_timeout_seconds: {{ default 180 .Values.feedsReadTimeout }}
    default_admin_password: ${ANCHORE_ADMIN_PASSWORD}
    default_admin_email: {{ .Values.defaultAdminEmail }}

    # Locations for keys used for signing and encryption. Only one of 'secret' or 'public_key_path'/'private_key_path' needs to be set. If all are set then the keys take precedence over the secret value
    # Secret is for a shared secret and if set, all components in anchore should have the exact same value in their configs.
    keys:
      {{- if or .Values.saml.secret .Values.saml.useExistingSecret }}
      secret: ${ANCHORE_SAML_SECRET}
      {{- end }}
      {{- with .Values.saml.publicKeyName }}
      public_key_path: /home/anchore/certs/{{- . }}
      {{- end }}
      {{- with .Values.saml.privateKeyName }}
      private_key_path: /home/anchore/certs/{{- . }}
      {{- end }}

    # Configuring supported user authentication and credential management
    user_authentication:
      oauth:
        enabled: {{ .Values.oauthEnabled }}
        default_token_expiration_seconds: {{ .Values.oauthTokenExpirationSeconds }}

      # Set this to True to enable storing user passwords only as secure hashes in the db. This can dramatically increase CPU usage if you
      # don't also use oauth and tokens for internal communications (which requires keys/secret to be configured as well)
      # WARNING: you should not change this after a system has been initialized as it may cause a mismatch in existing passwords
      hashed_passwords: {{ .Values.hashedPasswords }}

    credentials:
      database:
        {{- if .Values.dbConfig.ssl }}
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}?sslmode={{- .Values.dbConfig.sslMode -}}&sslrootcert=/home/anchore/certs/{{- .Values.dbConfig.sslRootCertName -}}"
        {{- else }}
        db_connect: "postgresql://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_HOST}/${ANCHORE_DB_NAME}"
        {{- end }}
        db_connect_args:
          timeout: {{ .Values.dbConfig.timeout }}
          ssl: false
        db_pool_size: {{ .Values.dbConfig.connectionPoolSize }}
        db_pool_max_overflow: {{ .Values.dbConfig.connectionPoolMaxOverflow }}
        {{- with .Values.dbConfig.engineArgs }}
        db_engine_args:
          {{- toYaml . | nindent 10 }}
        {{- end }}

    services:
      apiext:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.api.fullname" . }}
        max_request_threads: {{ default 50 .Values.api.maxRequestThreads }}
        listen: 0.0.0.0
        port: {{ .Values.api.service.port }}
        {{- if .Values.api.external }}
        {{- if .Values.api.external.use_tls }}
        external_tls: {{ .Values.api.external.use_tls }}
        {{- end }}
        {{- if .Values.api.external.hostname }}
        external_hostname: {{ .Values.api.external.hostname }}
        {{- end }}
        external_port: {{ .Values.api.external.port | default "null" }}
        {{- end }}
        {{- if .Values.enableAnchoreRbac }}
        authorization_handler: external
        authorization_handler_config:
          endpoint: "http://localhost:{{- .Values.rbacAuth.port }}"
        {{- end }}
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      analyzer:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.analyzer.fullname" . }}
        listen: 0.0.0.0
        port: {{ .Values.analyzer.containerPort }}
        max_request_threads: {{ default 50 .Values.analyzer.maxRequestThreads }}
        cycle_timer_seconds: 1
        cycle_timers:
          {{- toYaml .Values.analyzer.cycleTimers | nindent 10 }}
        max_threads: {{ .Values.analyzer.concurrentTasksPerWorker }}
        analyzer_driver: 'nodocker'
        {{- if gt .Values.analyzer.layerCacheMaxGigabytes 0.0 }}
        layer_cache_enable: true
        {{- else }}
        layer_cache_enable: false
        {{- end }}
        layer_cache_max_gigabytes: {{ .Values.analyzer.layerCacheMaxGigabytes }}
        enable_hints: {{ .Values.analyzer.enableHints }}
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      catalog:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.catalog.fullname" . }}
        listen: 0.0.0.0
        port: {{ .Values.catalog.service.port }}
        max_request_threads: {{ default 50 .Values.catalog.maxRequestThreads }}
        cycle_timer_seconds: 1
        cycle_timers:
          # Interval to check for an update to a tag
          image_watcher: {{ .Values.catalog.cycleTimers.image_watcher }}
          # Interval to run a policy evaluation on images with the policy_eval subscription activated.
          policy_eval: {{ .Values.catalog.cycleTimers.policy_eval }}
          # Interval to run a vulnerability scan on images with the vuln_update subscription activated.
          vulnerability_scan: {{ .Values.catalog.cycleTimers.vulnerability_scan }}
          # Interval at which the catalog looks for new work to put on the image analysis queue.
          analyzer_queue: {{ .Values.catalog.cycleTimers.analyzer_queue }}
          # Interval at which the catalog archival tasks are triggered.
          archive_tasks: {{ .Values.catalog.cycleTimers.archive_tasks }}
          image_gc: {{ .Values.catalog.cycleTimers.image_gc }}
          # Interval notifications will be processed for state changes
          {{- if .Values.notifications.enabled }}
          notifications: 0
          {{- else }}
          notifications: {{ .Values.catalog.cycleTimers.notifications }}
          {{- end }}
          # Intervals service state updates are polled for the system status
          service_watcher: {{ .Values.catalog.cycleTimers.service_watcher }}
          # Interval between checks to repo for new tags
          repo_watcher: {{ .Values.catalog.cycleTimers.repo_watcher }}
          k8s_watcher: {{ .Values.catalog.cycleTimers.k8s_watcher }}
        event_log:
          {{- toYaml .Values.catalog.events | nindent 10 }}
        analysis_archive:
          {{- toYaml .Values.catalog.analysis_archive | nindent 10 }}
        object_store:
          {{- toYaml .Values.catalog.object_store | nindent 10 }}
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
        runtime_inventory:
          image_ttl_days: {{ .Values.catalog.runtime_inventory.image_ttl_days }}
      simplequeue:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.simplequeue.fullname" . }}
        listen: 0.0.0.0
        port: {{ .Values.simpleQueue.service.port }}
        max_request_threads: {{ default 50 .Values.simpleQueue.maxRequestThreads }}
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      policy_engine:
        enabled: true
        require_auth: true
        max_request_threads: {{ default 50 .Values.policyEngine.maxRequestThreads }}
        endpoint_hostname: {{ template "enterprise.policy-engine.fullname" . }}
        listen: 0.0.0.0
        port: {{ .Values.policyEngine.service.port }}
        cycle_timer_seconds: 1
        cycle_timers:
          {{- toYaml .Values.policyEngine.cycleTimers | nindent 10 }}
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      {{- if .Values.enableAnchoreRbac }}
      # This should never be exposed outside of linked containers/localhost. It is used only for internal service access
      rbac_authorizer:
        enabled: true
        require_auth: true
        endpoint_hostname: localhost
        listen: 127.0.0.1
        port: {{ .Values.rbacAuth.port }}
        max_request_threads: {{ default 50 .Values.rbacAuth.maxRequestThreads }}
      rbac_manager:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.api.fullname" . }}
        listen: 0.0.0.0
        port: {{ .Values.rbacManager.service.port }}
        max_request_threads: {{ default 50 .Values.rbacManager.maxRequestThreads }}
        authorization_handler: external
        authorization_handler_config:
          endpoint: "http://localhost:{{- .Values.rbacAuth.port }}"
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      {{- end }}
      {{- if .Values.reports.enabled }}
      reports:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.api.fullname" . }}
        listen: '0.0.0.0'
        port: {{ .Values.reports.service.port }}
        max_request_threads: {{ default 50 .Values.reports.maxRequestThreads }}
        enable_graphiql: "{{ .Values.reports.enableGraphql }}"
        enable_data_ingress: "{{ .Values.reports.enableDataIngress }}"
        cycle_timers:
          {{- toYaml .Values.reports.cycleTimers | nindent 10 }}
        {{- if .Values.enableAnchoreRbac }}
        authorization_handler: external
        authorization_handler_config:
          endpoint: "http://localhost:{{- .Values.rbacAuth.port }}"
        {{- end }}
        {{- if .Values.internalServicesSsl.enabled }}
        ssl_enable: {{ .Values.internalServicesSsl.enabled }}
        ssl_cert: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretCertName }}"
        ssl_key: "/home/anchore/certs/{{- .Values.internalServicesSsl.certSecretKeyName }}"
        {{- end }}
      {{- end }}
      {{- if .Values.notifications.enabled }}
      notifications:
        enabled: true
        require_auth: true
        endpoint_hostname: {{ template "enterprise.api.fullname" . }}
        listen: '0.0.0.0'
        port: {{ .Values.notifications.service.port }}
        max_request_threads: {{ default 50 .Values.notifications.maxRequestThreads }}
        authorization_handler: external
        authorization_handler_config:
          endpoint: "http://localhost:{{- .Values.rbacAuth.port }}"
        cycle_timers:
          {{- toYaml .Values.notifications.cycleTimers | nindent 10 }}
        {{- if .Values.notifications.uiUrl }}
        ui_url: "{{ .Values.notifications.uiUrl }}"
        {{- else }}
        ui_url: {{ include "enterprise.ui.fullname" . | quote }}
        {{- end }}
      {{- end }}
